**********************第一节*HTTP协议模拟发送**********************************
1.简介
	客户端发送http请求给服务器，服务器接收到了之后返回http响应回复给客户端
2.模拟发送
  a.模拟get请求
    1.get_client.php
      <?php
      // 创建连接
      $fp = fsockopen("localhost", 80, $errno, $errstr, 10);
      // 检测
      if (!$fp) {
        echo $errstr;
        die;
      }
      // 拼接http请求报文
      $http = "";
      // 请求报文包括三个部分 请求行 请求头 请求体
      // 请求头包括三部分 请求方式 请求脚本的绝对路径 请求版本
      $http .= "GET /lavarel/1.http/server.php HTTP/1.1\r\n";
      // 请求头信息
      $http .= "Host: localhost\r\n";
      $http .= "Connection: close\r\n\r\n";

      // 请求体 无

      // 发送请求
      fwrite($fp, $http);

      $res = "";
      // 获取结果
      while (!feof($fp)) {
        $res .= fgets($fp);
      }

      // 输出
      var_dump( $res);

      2.get_server.php
        <?php
        echo "I lOVE YOU VERY MUCH";
      
      3.浏览器打印的返回的数据
        //响应行
        E:\wamp64\www\lavarel\1.http\client.php:30:string 'HTTP/1.1 200 OK

        //响应头
        Date: Mon, 20 Jan 2020 10:18:36 GMT
        Server: Apache/2.4.41 (Win64) PHP/7.0.33
        X-Powered-By: PHP/7.0.33
        Content-Length: 20
        Connection: close
        Content-Type: text/html; charset=UTF-8

        //响应体
        I lOVE YOU VERY MUCH' (length=223)
  b.模拟post请求
    1.post_client
      <?php
      // 创建连接
      $fp = fsockopen("localhost", 80, $errno, $errstr, 10);
      // 判断
      if (!$fp) {
        echo $errstr;
        die;
      }

      $http = "";
      // 请求行
      $http .= "POST /StudyLaravel/StudyLavarel/1.http/3server.php HTTP/1.1\r\n";
      // 请求头
      $http .= "Host: localhost\r\n";
      $http .= "Connection: close\r\n";
      $http .= "Cookie: username=admin;uid=200\r\n";
      $http .= "User-agent: firefox-chrome-safari-ios-android\r\n";
      $http .= "Content-type: application/x-www-form-urlencoded\r\n";
      $http .= "Content-length: 37\r\n\r\n";

      // 请求体
      $http .= "email=xiaohigh@163.com&username=admin\r\n";


      // 发送
      fwrite($fp, $http);


      // 获取结果
      $res = "";
      while (!feof($fp)) {
        $res .= fgets($fp);
      }
      echo $res;
    2.server.php
      // 打印$_POST检测参数有没有顺利传过来
      // var_dump($_POST);

      // 打印$_COOKIE参数有没有顺利传过来
      // var_dump($_COOKIE);

      // 打印server的内容
      // var_dump($_SERVER);

      //打印$_get的内容
      // var_dump($_GET);

      // 使用超强局变量接收数据
      var_dump($GLOBALS);
3.实践 weather_API.php
  a.代码
    <?php
  // 创建连接
  $fp = fsockopen('gwgp-n6uzuwmjrou.n.bdcloudapi.com', 80, $errno, $errstr, 10);

  if (!$fp) {
    echo $errstr;
    die;
  }

  $http = "";
  $http .= "GET /weather/query?city=北京 HTTP/1.1\r\n";


  $http .= "Host: gwgp-n6uzuwmjrou.n.bdcloudapi.com\r\n";
  $http .= "Connection: close\r\n";
  $http .= "X-Bce-Signature:AppCode/ef6ef7f2d9e546929ac1bbd8bc23c216\r\n\r\n";

  // fwrite()用于把$http写到$fp里面 
  fwrite($fp, $http);

  $res = "";
  // feoof()用于检测$fp有没有执行完毕
  while (!feof($fp)) {
    // fgets()用于获取1k数据的获取，并拼接给$res
    $res .= fgets($fp);
    // echo $fp;
  }
  print_r($res);

  b.返回的数据
     {"status":0,"msg":"ok","result":{"city":"北京","cityid":1,"citycode":"101010100","date":"2020-01-22","week":"星期三","weather":"晴","temp":"2","temphigh":"6","templow":"-5","img":"0","humidity":"36","pressure":"1020","windspeed":"0.9","winddirect":"北风","windpower":"1级","updatetime":"2020-01-22 11:35:00","index":[{"iname":"空调指数","ivalue":"较少开启","detail":"您将感到很舒适，一般不需要开启空调。"},{"iname":"运动指数","ivalue":"较不宜","detail":"天气较好，但考虑天气寒冷，推荐您进行室内运动，户外运动时请注意保暖并做好准备活动。"},{"iname":"紫外线指数","ivalue":"中等","detail":"属中等强度紫外线辐射天气，外出时建议涂擦SPF高于15、PA+的防晒护肤品，戴帽子、太阳镜。"},{"iname":"感冒指数","ivalue":"易发","detail":"天冷，发生感冒机率较大，请注意适当增加衣服，加强自我防护避免感冒。"},{"iname":"洗车指数","ivalue":"适宜","detail":"适宜洗车，未来持续两天无雨天气较好，适合擦洗汽车，蓝天白云、风和日丽将伴您的车子连日洁净。"},{"iname":"空气污染扩散指数","ivalue":"中","detail":"气象条件对空气污染物稀释、扩散和清除无明显影响。"},{"iname":"穿衣指数","ivalue":"冷","detail":"天气冷，建议着棉服、羽绒服、皮夹克加羊毛衫等冬季服装。年老体弱者宜着厚棉衣、冬大衣或厚羽绒服。"}],"aqi":{"so2":"10","so224":"","no2":"42","no224":"","co":"1.100","co24":"","o3":"26","o38":"","o324":"","pm10":"71","pm1024":"","pm2_5":"62","pm2_524":"","iso2":"3","ino2":"21","ico":"11","io3":"8","io38":"","ipm10":"60","ipm2_5":"83","aqi":"84","primarypollutant":"PM2.5","quality":"良","timepoint":"2020-01-22 11:00:00","aqiinfo":{"level":"二级","color":"#FFFF00","affect":"空气质量可接受，但某些污染物可能对极少数异常敏感人群健康有较弱影响","measure":"极少数异常敏感人群应减少户外活动"}},"daily":[{"date":"2020-01-22","week":"星期三","sunrise":"07:30","sunset":"17:21","night":{"weather":"晴","templow":"-5","img":"0","winddirect":"北风","windpower":"3级"},"day":{"weather":"晴","temphigh":"6","img":"0","winddirect":"西南风","windpower":"3级"}},{"date":"2020-01-23","week":"星期四","sunrise":"07:29","sunset":"17:22","night":{"weather":"晴","templow":"-6","img":"0","winddirect":"东风","windpower":"3级"},"day":{"weather":"晴","temphigh":"8","img":"0","winddirect":"东北风","windpower":"3级"}},{"date":"2020-01-24","week":"星期五","sunrise":"07:29","sunset":"17:23","night":{"weather":"多云","templow":"-6","img":"1","winddirect":"南风","windpower":"3级"},"day":{"weather":"晴","temphigh":"3","img":"0","winddirect":"南风","windpower":"3级"}},{"date":"2020-01-25","week":"星期六","sunrise":"07:28","sunset":"17:24","night":{"weather":"多云","templow":"-5","img":"1","winddirect":"北风","windpower":"3级"},"day":{"weather":"多云","temphigh":"4","img":"1","winddirect":"西风","windpower":"3级"}},{"date":"2020-01-26","week":"星期日","sunrise":"07:27","sunset":"17:26","night":{"weather":"阴","templow":"-4","img":"2","winddirect":"北风","windpower":"3级"},"day":{"weather":"阴","temphigh":"6","img":"2","winddirect":"北风","windpower":"3级"}},{"date":"2020-01-27","week":"星期一","sunrise":"07:26","sunset":"17:27","night":{"weather":"阴","templow":"-4","img":"2","winddirect":"东南风","windpower":"3级"},"day":{"weather":"阴","temphigh":"7","img":"2","winddirect":"北风","windpower":"3级"}},{"date":"2020-01-28","week":"星期二","sunrise":"07:26","sunset":"17:28","night":{"weather":"阴","templow":"-4","img":"2","winddirect":"南风","windpower":"3级"},"day":{"weather":"阴","temphigh":"7","img":"2","winddirect":"南风","windpower":"3级"}}],"hourly":[{"time":"13:00","weather":"晴","temp":"4","img":"0"},{"time":"14:00","weather":"晴","temp":"5","img":"0"},{"time":"15:00","weather":"晴","temp":"6","img":"0"},{"time":"16:00","weather":"晴","temp":"5","img":"0"},{"time":"17:00","weather":"晴","temp":"5","img":"0"},{"time":"18:00","weather":"晴","temp":"2","img":"0"},{"time":"19:00","weather":"晴","temp":"1","img":"0"},{"time":"20:00","weather":"晴","temp":"0","img":"0"},{"time":"21:00","weather":"晴","temp":"0","img":"0"},{"time":"22:00","weather":"晴","temp":"-1","img":"0"},{"time":"23:00","weather":"晴","temp":"-1","img":"0"},{"time":"00:00","weather":"晴","temp":"-2","img":"0"},{"time":"01:00","weather":"晴","temp":"-3","img":"0"},{"time":"02:00","weather":"晴","temp":"-3","img":"0"},{"time":"03:00","weather":"晴","temp":"-3","img":"0"},{"time":"04:00","weather":"晴","temp":"-4","img":"0"},{"time":"05:00","weather":"晴","temp":"-4","img":"0"},{"time":"06:00","weather":"晴","temp":"-4","img":"0"},{"time":"07:00","weather":"晴","temp":"-4","img":"0"},{"time":"08:00","weather":"晴","temp":"-4","img":"0"},{"time":"09:00","weather":"晴","temp":"-1","img":"0"},{"time":"10:00","weather":"晴","temp":"2","img":"0"},{"time":"11:00","weather":"晴","temp":"4","img":"0"},{"time":"12:00","weather":"晴","temp":"5","img":"0"}]}}


**********************第二节*命名空间与虚拟主机搭建*****************************
1.命名空间 namespace.php
  a.介绍：
    命名空间是一种封装事物的方法，就是将代码放到一个‘文件夹’中
  b.作用：
    1.为了防止命名重复
    2.方便类的引入
  c.使用：include_namespace.php
    1.命名当前路径
      namespace one;
    2.在当前路径下接着命名
      namespace one\two\three;
    3.注意事项
      a.命名空间语句必须放在第一行
      b.命名空间只对函数，类和常量(const)有效，变量是全局有效的
      c.大多数情况下，都是一个文件一个命名空间
2.命名空间的使用 
  a.类的操作
    1.系统类->PDO->pdo_namespace.php
    2.变量类->class->class_namespace.php
    3.导入->include_namespace.php &　inport_namespace.php


**************第三节*Composer安装以及Laravel框架的安装配置************************
1.简介
  是PHP用来管理PHP依赖关系的工具，工具包地址：https://packagist.org/
2.安装
  https://getcomposer.org/download/
3.修改中文镜像
  composer config -g repo.packagist composer https://packagist.phpcomposer.com 
4.基本使用
  a.在指定文件夹下创建Composer.json，填写相关的配置代码
    {
      "require": {
        "endroid/qr-code": "3.2.4"
      }
    }
  b.在命令行下执行composer install
    执行命令的时候，一定要将命令行目录切换到创建composer.json文件夹下
  c.创建PHP脚本，并且要引入vendor文件夹下的autoload.php
  d.查看文档，使用工具包
5.更新Composer.json文件
  a.修改文件
    {
      "require": {
        "endroid/qr-code": "3.2.4",
        "xiaohigh/curl": "1.0"
      }
    }
  b.更新
    composer update
6.软件更新
  composer self-update
7.Laravel
  a.简介
  b.运行环境要求
    1.PHP版本>=5.5.9
    2.Mcrypt PHP扩展
      PHP加密扩展，提供多种加密算法
    3.OpenSSL扩展
      对数据传输进行加密
    4.MBstring
      提供了针对多字符串不同类型的字符的截取的支持
    5.Tokenizer PHP扩展
      PHP代码解析
  c.安装
    1.composer create-project laravel/laravel your-project-name --prefer-dist "5.1.*"
        命令   命令(创建项目)     包的名称        你的文件夹名称        优先的版本
    2.
  d.配置


  *********************************第四节*Laravel基础之路由********************************
  0.什么是路由
    路由是有信息从源地址传递到目的地的作用
  1.文件位置
    app/Http/routes.php
  2.基本路由
    a.get请求
      Route::get('/test', function(){
        echo "这是一个测试路径";
      });
    b.post请求
      Route::post('/add',function(){
        // echo "这是一个添加操作";
        return view('add');
      });
    c.报错信息
      1.MethodNotAllowedHttpException in RouteCollection.php line 218:
        说明当前的请求方式和路由规则滴滴请求方式不匹配
      2.TokenMismatchException in VerifyCsrfToken.php line 53:
        当前post请求中缺少验证信息，需要在每一个post请求的form表单中添加一个隐藏域来完成请求
      3.NotFoundHttpException in RouteCollection.php line 161:
        说明路由规则没有能匹配到请求路径
    d.Laravel框架中所有的模版文件都是放在 resources/views 文件夹中
    e.Laravel框架中模版的后缀名是 .blade.php
    f.模拟put和delete请求
      1.PUT
        Route::get('/put',function(){
          return view('put');
        });

        Route::put('/update',function(){
          $username = $_POST["username"];
          $password = $_POST["pwd"];
          echo "用户名是：".$username."<br>"."密码是：".$password;
        });

        <form action="/update" method="post">
          <input type="hidden" name = "_method" value="PUT">
          用户名：<input type="text" name="username"><br>
          密码：<input type="password" name="pwd"><br>
          <button>点击提交</button><br>
          {{csrf_field()}}
        </form>
      2.DELETE
        Route::get('/delete',function(){
          return view('put');
        });

        Route::put('/update',function(){
          $username = $_POST["username"];
          $password = $_POST["pwd"];
          echo "用户名是：".$username."<br>"."密码是：".$password;
        });

        <form action="/update" method="post">
          <input type="hidden" name = "_method" value="DELETE">
          用户名：<input type="text" name="username"><br>
          密码：<input type="password" name="pwd"><br>
          <button>点击提交</button><br>
          {{csrf_field()}}
        </form>
    g.带参数的路由
      Route::get('/article/{id}',function($id){
        echo "ID值为".$id;
      });

    h.限制参数的类型
      Route::get('/goods/{id}',function($id){
        echo "商品的ID为".$id;
      })->where('id','\d+');
    i.传递多个参数(并限制ID的值只能为数字)
      Route::get('/values/{type}-{id}',function($type,$id){
        echo "商品的类型为".$type."商品ID为".$id;
      })->where('id','\d+');

























  3.

  4.传递多个参数

  5.路由别名

  6.路由组的设置

  7.404页面设置






















  f.中间件
  g.控制器
  h.请求
  i.

